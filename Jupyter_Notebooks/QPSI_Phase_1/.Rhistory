shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
print(custom_pattern)
print(custom_pal_blues)
print(length(custom_pal_blues))
View(hg38)
View(hg38)
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
install.packages("gggenes")
library(gggenomes)
# install ggtree
# https://bioconductor.org/packages/release/bioc/html/ggtree.html
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
library(gggenomes)
# https://bioconductor.org/packages/release/bioc/html/ggtree.html
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
BiocManager::install("ggtree", force=TRUE)
# install.packages("devtools")
devtools::install_github("thackl/thacklr")
# install.packages("devtools")
library(devtools)
install.packages("devtools")
devtools::install_github("thackl/thacklr")
devtools::install_github("thackl/gggenomes")
library(gggenomes)
install.packages(c("colorspace", "dplyr", "fansi", "glue", "httpuv", "magrittr", "Rcpp", "RCurl", "readr", "rlang", "RSQLite"))
install.packages("MASS", lib="C:/Program Files/R/R-4.1.2/library")
install.packages(c("colorspace", "dplyr", "fansi", "glue", "httpuv", "magrittr", "Rcpp", "RCurl", "readr", "rlang", "RSQLite"))
install.packages("MASS", lib="C:/Program Files/R/R-4.1.2/library")
install.packages(c("colorspace", "dplyr", "fansi", "glue", "httpuv", "magrittr", "Rcpp", "RCurl", "readr", "rlang", "RSQLite"))
devtools::install_github("thackl/gggenomes")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree", force=TRUE)
library(devtools)
devtools::install_github("thackl/thacklr")
install.packages("glue")
library(devtools)
devtools::install_github("thackl/thacklr")
devtools::install_github("thackl/gggenomes")
library(gggenomes)
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_TimeSeries_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_TimeSeries_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_TimeSeries_UI')
file <- "https://docs.google.com/spreadsheets/d/1AvcMDToyYETo7spn_03z5PZIcywM30x5/edit?usp=sharing&ouid=110935869937426825350&rtpof=true&sd=true"
download.file(file,
temp)
X <- read.csv(url(file))
install.packages("gdata")
library("gdata")
data <- read.xls(file, sheet=1)
install.packages("googledrive")
library(googledrive)
file_url <- "https://docs.google.com/spreadsheets/d/1AvcMDToyYETo7spn_03z5PZIcywM30x5/edit?usp=sharing&ouid=110935869937426825350&rtpof=true&sd=true"
dl <- drive_download(
as_id(file_url),
path = 'temp1.xlsx',
overwrite = TRUE,
type = "xlsx")
Three_Time_Series <- readxl::read_excel('temp1.xlsx')
library (BiocManager)
# Need to use the development version for now.
BiocManager::install(version="devel")
BiocManager::valid()
BiocManager::install(c(
"aplot", "babelgene", "BiocManager", "blob", "bookdown", "broom", "caret", "checkmate", "cli", "crayon", "DT",
"ensembldb", "extrafont", "fansi", "formatR", "future", "future.apply", "gert", "ggfun", "ggnewscale", "haven",
"Hmisc", "igraph", "knitr", "limma", "lme4", "magrittr", "maptools", "matrixStats", "msigdbr", "parallelly", "plyr",
"polynom", "processx", "ps", "RColorBrewer", "RcppArmadillo", "RcppEigen", "readxl", "reshape", "rmarkdown",
"rprojroot", "S4Vectors", "sass", "scales", "seriation", "shadowtext", "shinyBS", "sp", "testthat", "tidygraph",
"tinytex", "tzdb", "uuid", "vctrs", "VennDiagram", "webshot", "WGCNA"
), update = TRUE, ask = FALSE)
BiocManager::valid()
BiocManager::install(c("cluster", "fansi", "magrittr", "MASS", "matrix", "plyr",
"S4Vectors", "vctrs"), update = TRUE, ask = FALSE)
BiocManager::install("timecoursedata")
BiocManager::install("timecoursedata")
BiocManager::install("timecoursedata", force=TRUE)
library("timecoursedata")
BiocManager::install("moanin", force=TRUE)
library("moanin")
# From Github
library(moanin)
library(timecoursedata)
# From CRAN
library(NMF)
library(ggfortify)
# From Bioconductor
library(topGO)
library(biomaRt)
library(KEGGprofile)
library(BiocWorkflowTools)
install.packages("NMF")
install.packages("ggfortify")
BiocManager::install("KEGGprofile", force=TRUE)
remove.packages("BiocVersion")
BiocManager::install()
.libPaths()
# Need to use the development version for now.
BiocManager::install(version="devel")
BiocManager::valid()
BiocManager::install(c(
"BiocManager", "cli", "fansi", "magrittr", "plyr", "S4Vectors", "tzdb", "vctrs"
), update = TRUE, ask = FALSE)
install.packages("BiocManager")
install.packages(c("cli", "fansi", "magrittr", "Matrix", "plyr", "tzdb", "vctrs"))
install.packages(c("cluster", "MASS", "Matrix"), lib="C:/Program Files/R/R-4.1.2/library")
install.packages(c("cli", "fansi", "magrittr", "Matrix", "plyr", "tzdb", "vctrs"))
install.packages(c("cli", "fansi", "magrittr", "Matrix", "plyr", "tzdb", "vctrs"))
install.packages(c("cli", "fansi", "magrittr", "Matrix", "plyr", "tzdb", "vctrs"))
install.packages(c("cli", "fansi", "magrittr", "Matrix", "plyr", "tzdb", "vctrs"))
BiocManager::install("S4Vectors")
BiocManager::install("S4Vectors", force=TRUE)
# From Github
library(moanin)
install.packages("ClusterR")
# From Github
library(moanin)
library(timecoursedata)
# From CRAN
library(NMF)
library(ggfortify)
# From Bioconductor
library(topGO)
library(biomaRt)
#library(KEGGprofile) #Deprecated, will need to modify workflow
library(BiocWorkflowTools)
# Now load in the metadata
data(shoemaker2015)
meta = shoemaker2015$meta
data = shoemaker2015$data
###################################################################################
#First bit of scripting
#This is just creating the color scheme
group_colors = c(
"M"="dodgerblue4",
"K"="gold",
"C"="orange",
"VH"="red4",
"VL"="red2")
time_colors = grDevices::rainbow(15) [1:14]
names(time_colors) = c(0, 3, 6, 9,12, 18, 24, 30, 36, 48, 60, 72, 120, 168)
# Combine all color schemes into one named lists.
ann_colors = list(
Timepoint=time_colors,
Group=group_colors
)
replicate_markers = c(15, 17, 19)
names(replicate_markers) = c(1, 2, 3)
ann_markers = list(
Replicate=replicate_markers)
# Reorder the conditions such that:
#   - Control is before any influenza treatment
#   - Each treatment is ordered from low to high pathogeny
meta$Group = factor(meta$Group, levels(meta$Group)[c(3, 2, 1, 5, 4)])
##################################################################################
#Trims number of genes used in analysis using a variance cutoff threshold
variance_cutoff = 0.5
# Filter genes by median absolute deviation (mad)
variance_per_genes = apply(data, 1, mad)
min_variance = quantile(variance_per_genes, c(variance_cutoff))
variance_filtered_data = data[variance_per_genes > min_variance,]
##################################################################################
##################################################################################
#Creates a moanin object
moanin_model = create_moanin_model(data=data, meta=meta,
degrees_of_freedom=6)
##################################################################################
formula = ~Group:ns(Timepoint, df=degrees_of_fredoom) + Group + 0
##################################################################################
#Create formula for linear model
formula = ~Group:ns(Timepoint, df=degrees_of_fredoom) + Group + 0.
###################################################################################
show(moanin_model)
#################################################################################
contrasts = create_timepoints_contrasts(moanin_model,"M", "VL")
View(meta)
View(meta)
weekly_de_analysis = DE_timepoints(moanin_model, contrasts,
use_voom_weights=FALSE)
# Differential expression analysis
timecourse_contrasts = c("M-K", "M-C", "M-VL", "M-VH")
# The function takes the data (data.frame or named matrix), the meta data
# (data.frame containing a timepoint and group column, the first corresponding
# to the time-course information, the latter corresponding to the
# treatment).
DE_results = DE_timecourse( moanin_model, timecourse_contrasts,
use_voom_weights=FALSE)
pval_columns = colnames(DE_results)[
grepl("pval", colnames(DE_results))]
qval_columns = colnames(DE_results)[
grepl("qval", colnames(DE_results))]
pvalues = DE_results[, pval_columns]
qvalues = DE_results[, qval_columns]
log_fold_change_timepoints = estimate_log_fold_change(
moanin_model, timecourse_contrasts,  method="timely")
log_fold_change_timecourse = estimate_log_fold_change(
moanin_model, timecourse_contrasts,  method="timecourse")
log_fold_change_sum = estimate_log_fold_change(
moanin_model, timecourse_contrasts,  method="sum")
log_fold_change_max = estimate_log_fold_change(
moanin_model, timecourse_contrasts, method="max")
log_fold_change_min = estimate_log_fold_change(
moanin_model, timecourse_contrasts, method="min")
pvalue = DE_results[, "M-K_pval"]
names(pvalue) = row.names(DE_results)
lfc_timecourse = log_fold_change_timecourse[, "M-K"]
names(lfc_timecourse) = row.names(log_fold_change_timecourse)
plot(lfc_timecourse, -log10(pvalue), pch=20, main="Volcano plot",
xlim=c(-2.5, 2), xlab="Timecourse lfc")
top_DE_genes_pval = names(sort(pvalue)[1:10])
plot_splines_data(moanin_model,subset_data=top_DE_genes_pval,
colors=ann_colors$Group, smooth=TRUE,
mar=c(1.5,2.5,2,0.1))
top_DE_genes_lfc = names(
sort(abs(lfc_timecourse),
decreasing=TRUE)[1:10])
plot_splines_data(moanin_model, subset_data=top_DE_genes_lfc,
colors=ann_colors$Group, smooth=TRUE,
mar=c(1.5,2.5,2,0.1))
fishers_pval = pvalues_fisher_method(pvalues)
qvalues = apply(pvalues, 2, p.adjust)
fishers_qval = p.adjust(fishers_pval)
genes_to_keep = row.names(
log_fold_change_max[
(rowSums(log_fold_change_max > 2) > 0) &
(fishers_qval < 0.05), ])
# Keep the data corresponding to the genes of interest in another variable.
# by subsetting the `moanin_model`, which contains the data.
de_moanin_model = moanin_model[genes_to_keep,]
kmeans_clusters = splines_kmeans(de_moanin_model, n_clusters=8,
random_seed=42,
n_init=20)
plot_splines_data(de_moanin_model,
data=kmeans_clusters$centroids,
colors=ann_colors$Group,
smooth=TRUE)
cluster_of_interest = 2
cluster2Genes = names(
kmeans_clusters$clusters[kmeans_clusters$clusters==cluster_of_interest])
plot_splines_data(de_moanin_model,
centroid=kmeans_clusters$centroids[cluster_of_interest,],
colors=ann_colors$Group, smooth=TRUE,simpleY =FALSE,
subset_data=cluster2Genes[3:6],
mar=c(1.5,2.5,2,0.1))
scores_and_labels = splines_kmeans_score_and_label(
moanin_model, kmeans_clusters)
labels = scores_and_labels$labels
# Let's keep only the list of genes that have a label.
labels = unlist(labels[!is.na(labels)])
# And also keep track of all the genes in cluster 2.
genes_in_cluster2 = names(labels[labels==cluster_of_interest])
unfiltered_scores = splines_kmeans_score_and_label(
moanin_model, kmeans_clusters,
proportion_genes_to_label=1,
previous_scores=scores_and_labels$scores)
best_score = rowMin(scores_and_labels$scores)
best_label = unfiltered_scores$labels
par(mfrow=c(3, 3))
n_clusters = dim(kmeans_clusters$centroids)[1]
for(cluster_id in 1:n_clusters){
hist(best_score[best_label==cluster_id],
breaks=(1:50/50), xlim=c(0, 1),
col="black", main=paste("C", cluster_id, sep=""),
xlab="score", ylab="Num. genes")
abline(v=scores_and_labels$score_cutoff, col="red", lwd=3, lty=2)
ord = order(scores_and_labels$scores[genes_in_cluster2,
cluster_of_interest])
cluster2Score = genes_in_cluster2[ord]
plot_splines_data(
moanin_model, subset_data=cluster2Score[1:4],
centroid=kmeans_clusters$centroids[cluster_of_interest,],
colors=ann_colors$Group, smooth= TRUE, simpleY= FALSE,
mar=c(1.5,2.5,2,0.1))
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_TimeSeries_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp()
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp()
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
shiny::runApp('C:/Users/mclea/OneDrive/GitHub/BNL_RNA_UI')
setwd("C:/Users/mclea/OneDrive/Brookhaven/AWS/Jupyter_Notebooks/QPSI")
library(ComplexHeatmap)
library(dendextend)
library(circlize)
library(dplyr)
library(RColorBrewer)
library(tidyr)
#Make Poplar
mat1 <- read.csv('Full_Poplar.csv', row=1)
metadata <- read.csv('All_metadata.csv')
#Change "TissueXTrtXTime" string with treatment column from your metadata file
#that corresponds the names on your data matrix file
#################################################################################
metadata <- metadata %>% distinct(TissueXTrtXTime, .keep_all = TRUE) #Change this
#mat %>% select(matches())
mat1<-na.omit(mat1)
mat2 <- mat1
#Comment out the line below if you are working with Gene expression data
#mat1 <- t(mat1) #comment out this line if working with gene expression data
for ( col in 1:ncol(mat2)){
colnames(mat2)[col] <-  gsub("_", " ", colnames(mat2)[col])
}
mat1 <- data.matrix(mat1)
mat2 <- data.matrix(mat2)
column_tree = hclust(dist(t(mat1)))
column_order <- column_tree$labels
#Change "TissueXTrtXTime" to the column that corresponds to your count labels
#######################################################################################
meta2 <- arrange(metadata, factor(metadata$TissueXTrtXTime, levels=column_order)) #change this
####################################################################################
####################################################################################
#Create vectors for heatmap annotation, 1 vector per annotation
trt <- meta2$Treatment
tiss <- meta2$Tissue
time <- meta2$Time
#Change colors and categories based on the treatment (column)
ha <- HeatmapAnnotation(
tissue = tiss,
treatment = trt,
timepoint = time,
col=list(tissue=structure(names=c("Leaf","Root"), c("green","brown")),
treatment=structure(names=c("FeEx","Control","FeLim", "ZnEx", "ZnLim"), c("red2","royalblue","limegreen", "gold", "purple")),
timepoint=structure(names=c("0h","1h", "2d", "4d", "7d",
"14d", "21d"), brewer.pal(7,"OrRd"))),
border=TRUE,
show_legend=c(TRUE,TRUE,TRUE),
show_annotation_name=FALSE,
annotation_legend_param = list(
tissue= list(title="Tissue Type", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
treatment= list(title="Metal Treatment", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
timepoint= list(title="Time Point", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16), at=c("0h","1h", "2d", "4d", "7d",
"14d", "21d")))
)
#Change row_km and column_km for the number of clusters you want to generate
ht_list <- Heatmap(mat2, column_title="Poplar Enriched GO Term Expression", name = "Zscore", column_km=6, column_gap=unit(2, "mm"),
bottom_annotation=ha,
column_names_gp=gpar(fontsize=14),
row_names_gp=gpar(fontsize=14),
width=ncol(mat2)*unit(5,"mm"),
height=nrow(mat2)*unit(5, "mm"),
heatmap_legend_param=list(title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
column_title_gp = gpar(fontsize = 30, fontface = "bold"))
###################################################################################
##################################################################################
#Change filename
pdf("Poplar_Full_Clusters_zscore.pdf",width=26,height=18) #Change this
draw(ht_list, annotation_legend_side = "left", heatmap_legend_side = "left",
padding = unit(c(2, 5, 2, 20), "mm"))
dev.off()
############################################################################################
#Change colors and categories based on the treatment (column)
ha <- HeatmapAnnotation(
tissue = tiss,
treatment = trt,
timepoint = time,
col=list(tissue=structure(names=c("Leaf","Root"), c("green","brown")),
treatment=structure(names=c("FeEx","Control","FeLim", "ZnEx", "ZnLim"), c("red2","royalblue","limegreen", "gold", "purple")),
timepoint=structure(names=c("0h","1h", "2d", "4d", "7d",
"14d", "21d"), brewer.pal(7,"OrRd"))),
border=TRUE,
show_legend=c(TRUE,TRUE,TRUE),
show_annotation_name=FALSE,
annotation_legend_param = list(
tissue= list(title="Tissue Type", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
treatment= list(title="Metal Treatment", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
timepoint= list(title="Time Point", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16), at=c("0h","1h", "2d", "4d", "7d",
"14d", "21d")))
)
#Change row_km and column_km for the number of clusters you want to generate
ht_list <- Heatmap(mat2, column_title="Poplar Enriched GO Term Expression", name = "Zscore", column_km=6, column_gap=unit(2, "mm"),
bottom_annotation=ha,
column_names_gp=gpar(fontsize=14),
row_names_gp=gpar(fontsize=14),
width=ncol(mat2)*unit(5,"mm"),
height=nrow(mat2)*unit(5, "mm"),
heatmap_legend_param=list(title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
column_title_gp = gpar(fontsize = 30, fontface = "bold"))
###################################################################################
##################################################################################
#Change filename
pdf("Poplar_Full_Clusters_zscore.pdf",width=26,height=15) #Change this
draw(ht_list, annotation_legend_side = "left", heatmap_legend_side = "left",
padding = unit(c(2, 5, 2, 20), "mm"))
dev.off()
############################################################################################
############################################################################################
#Change colors and categories based on the treatment (column)
ha <- HeatmapAnnotation(
tissue = tiss,
treatment = trt,
timepoint = time,
col=list(tissue=structure(names=c("Leaf","Root"), c("green","brown")),
treatment=structure(names=c("FeEx","Control","FeLim", "ZnEx", "ZnLim"), c("red2","royalblue","limegreen", "gold", "purple")),
timepoint=structure(names=c("0h","1h", "2d", "4d", "7d",
"14d", "21d"), brewer.pal(7,"OrRd"))),
border=TRUE,
show_legend=c(TRUE,TRUE,TRUE),
show_annotation_name=FALSE,
annotation_legend_param = list(
tissue= list(title="Tissue Type", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
treatment= list(title="Metal Treatment", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
timepoint= list(title="Time Point", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16), at=c("0h","1h", "2d", "4d", "7d",
"14d", "21d")))
)
#Change row_km and column_km for the number of clusters you want to generate
ht_list <- Heatmap(mat2, column_title="Poplar Enriched GO Term Expression", name = "Zscore", column_km=6, column_gap=unit(2, "mm"),
bottom_annotation=ha,
column_names_gp=gpar(fontsize=14),
row_names_gp=gpar(fontsize=14),
width=ncol(mat2)*unit(5,"mm"),
height=nrow(mat2)*unit(5, "mm"),
heatmap_legend_param=list(title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
column_title_gp = gpar(fontsize = 30, fontface = "bold"))
###################################################################################
##################################################################################
#Change filename
pdf("Poplar_Full_Clusters_zscore.pdf",width=26,height=12) #Change this
draw(ht_list, annotation_legend_side = "left", heatmap_legend_side = "left",
padding = unit(c(2, 5, 2, 20), "mm"))
dev.off()
############################################################################################
setwd("C:/Users/mclea/OneDrive/Brookhaven/AWS/Jupyter_Notebooks/QPSI")
library(ComplexHeatmap)
library(dendextend)
library(circlize)
library(dplyr)
library(RColorBrewer)
library(tidyr)
mat1 <- read.csv('Full_Sorghum.csv', row=1)
metadata <- read.csv('All_metadata.csv')
#Change "TissueXTrtXTime" string with treatment column from your metadata file
#that corresponds the names on your data matrix file
#################################################################################
metadata <- metadata %>% distinct(TissueXTrtXTime, .keep_all = TRUE) #Change this
#mat %>% select(matches())
mat1<-na.omit(mat1)
mat2 <- mat1
#Comment out the line below if you are working with Gene expression data
#mat1 <- t(mat1) #comment out this line if working with gene expression data
for ( col in 1:ncol(mat2)){
colnames(mat2)[col] <-  gsub("_", " ", colnames(mat2)[col])
}
mat1 <- data.matrix(mat1)
mat2 <- data.matrix(mat2)
column_tree = hclust(dist(t(mat1)))
column_order <- column_tree$labels
#Change "TissueXTrtXTime" to the column that corresponds to your count labels
#######################################################################################
meta2 <- arrange(metadata, factor(metadata$TissueXTrtXTime, levels=column_order)) #change this
####################################################################################
####################################################################################
#Create vectors for heatmap annotation, 1 vector per annotation
trt <- meta2$Treatment
tiss <- meta2$Tissue
time <- meta2$Time
#Change colors and categories based on the treatment (column)
ha <- HeatmapAnnotation(
tissue = tiss,
treatment = trt,
timepoint = time,
col=list(tissue=structure(names=c("Leaf","Root"), c("green","brown")),
treatment=structure(names=c("FeEx","Control","FeLim", "ZnEx", "ZnLim"), c("red2","royalblue","limegreen", "gold", "purple")),
timepoint=structure(names=c("0h","1h", "2d", "4d", "7d",
"14d", "21d"), brewer.pal(7,"OrRd"))),
border=TRUE,
show_legend=c(TRUE,TRUE,TRUE),
show_annotation_name=FALSE,
annotation_legend_param = list(
tissue= list(title="Tissue Type", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
treatment= list(title="Metal Treatment", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
timepoint= list(title="Time Point", title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16), at=c("0h","1h", "2d", "4d", "7d",
"14d", "21d")))
)
#Change row_km and column_km for the number of clusters you want to generate
ht_list <- Heatmap(mat2, column_title="Sorghum Enriched GO Term Expression", name = "Zscore", column_km=6, column_gap=unit(2, "mm"),
bottom_annotation=ha,
column_names_gp=gpar(fontsize=14),
row_names_gp=gpar(fontsize=14),
width=ncol(mat2)*unit(5,"mm"),
height=nrow(mat2)*unit(5, "mm"),
heatmap_legend_param=list(title_gp=gpar(fontsize=20, fontface="bold"), labels_gp=gpar(fontsize=16)),
column_title_gp = gpar(fontsize = 30, fontface = "bold"))
##################################################################################
#Change filename
pdf("Sorghum_Full_Clusters_zscore.pdf",width=26,height=8) #Change this
draw(ht_list, annotation_legend_side = "left", heatmap_legend_side = "left",
padding = unit(c(2, 5, 2, 20), "mm"))
dev.off()
sessionInfo()
